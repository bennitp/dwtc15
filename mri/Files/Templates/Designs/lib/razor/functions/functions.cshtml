@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System.Web
@using System.Linq

@functions {
    string GetAbsoluteUrl(string url)
    {
        var request = HttpContext.Current.Request;
        return request.Url.Scheme + "://" + request.Url.Host + url;
    }

    string GetQueryParameter(string name)
    {
        return HttpContext.Current.Request[name];
    }

    string BuildUrl(dynamic parameters, bool clear = false)
    {
        return BuildUrl(HttpContext.Current.Request.Url.PathAndQuery, parameters, clear);
    }

    string BuildUrl(string url, dynamic parameters, bool clear = false)
    {
        var dict = new Dictionary<string, object>();
        if (parameters != null)
        {
            var type = parameters.GetType();
            var properties = type.GetProperties();
            foreach (var property in properties)
            {
                dict.Add(property.Name, property.GetValue(parameters));
            }
        }
        return BuildUrl(url, dict, clear);
    }

    string BuildUrl(string url, Dictionary<string, object> parameters, bool clear = false)
    {
        var query = HttpUtility.ParseQueryString("");
        var index = url.IndexOf('?');
        if (index > -1)
        {
            if (!clear)
            {
                query = HttpUtility.ParseQueryString(url.Substring(index));
            }
            url = url.Substring(0, index);
        }

        if (parameters != null)
        {
            foreach (var e in parameters)
            {
                query.Remove(e.Key);
                query.Add(e.Key, e.Value == null ? "" : e.Value.ToString());
            }
        }

        if (query.Count > 0)
        {
            query.Remove("debug");
            query.Remove("dbstat");
            query.Remove("parse");
            query.Remove("purge");

            return string.Format("{0}?{1}", url, query);
        }
        else
        {
            return url;
        }
    }
}

@using System.Text.RegularExpressions;

@functions {
    string GetExcerpt(string text, int length, string dots = " …")
    {
        var excerpt = Regex.Replace(System.Net.WebUtility.HtmlDecode(text), "<[^>]*>", "");
        if (excerpt.Length > length)
        {
            excerpt = excerpt.Remove(length);
            excerpt = Regex.Replace(excerpt, @"\s[^\s]+$", "");
            excerpt += dots;
        }
        return excerpt;
    }
}

@functions {
    string StripTags(string content)
    {
        return Regex.Replace(content, "<[^>]*>", "");
    }

    string XmlEncode(object value)
    {
        return value != null ? XmlEncode(value.ToString()) : null;
    }

    string XmlEncode(string value)
    {
        return System.Net.WebUtility.HtmlEncode(System.Net.WebUtility.HtmlDecode(value));
    }

    string XmlElement(string elementName, object content)
    {
        var s = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}", content);
        if (string.IsNullOrEmpty(s))
        {
            return "<" + elementName + "/>";
        }
        else
        {
            // Prevent Html Agility Pack from messing up the markup
            return "<" + elementName + ">" + s + "<" + "/" + elementName + ">";
        }
    }
}

@using Dynamicweb.Content.Items;

@functions {
    IEnumerable<Item> GetItemsByIds(string itemType, string idList)
    {
        var ids = idList.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList<string>();
        return GetItemsByIds(itemType, ids);
    }

    IEnumerable<Item> GetItemsByIds(string itemType, List<string> ids)
    {
        try
        {
            var repo = new Dynamicweb.Content.Items.Queries.Repository(itemType);
            var items = repo.SelectByIds(ids).OrderBy(i => ids.IndexOf(i.Id));
            return items;
        }
        catch { }
        return null;
    }

    IEnumerable<Dynamicweb.Frontend.Page> GetAncestors(Dynamicweb.Frontend.Page page = null, bool includeSelf = false)
    {
        if (page == null)
        {
            page = Pageview.Page;
        }
        if (!includeSelf && page != null)
        {
            page = page.Parent;
        }

        var ancestors = new List<Dynamicweb.Frontend.Page>();
        while (page != null)
        {
            ancestors.Add(page);
            page = page.Parent;
        }
        return ancestors;
    }

    // Get all descendants of a page (breadth-first)
    IEnumerable<Dynamicweb.Frontend.Page> GetDescendants(Dynamicweb.Frontend.Page page = null, bool includeSelf = false)
    {
        if (page == null)
        {
            page = Pageview.Page;
        }
        var descendants = new List<Dynamicweb.Frontend.Page>();
        if (page != null)
        {
            if (includeSelf)
            {
                descendants.Add(page);
            }
            if (page.Children != null)
            {
                foreach (var c in page.Children)
                {
                    descendants.Add(c);
                    descendants.AddRange(GetDescendants(c));
                }
            }
        }
        return descendants;
    }

    IEnumerable<Dynamicweb.Frontend.Page> GetDescendants(Func<Dynamicweb.Frontend.Page, bool> predicate, Dynamicweb.Frontend.Page page = null, bool includeSelf = false)
    {
        var descendants = GetDescendants(page, includeSelf);
        return descendants != null ? descendants.Where(predicate) : null;
    }

    Dynamicweb.Frontend.Page GetAncestor(Func<Dynamicweb.Frontend.Page, bool> predicate, Dynamicweb.Frontend.Page page = null)
    {
        var ancestors = GetAncestors(page);
        return ancestors != null ? ancestors.FirstOrDefault(predicate) : null;
    }

    Dynamicweb.Frontend.Page GetMostDistantAncestor(Func<Dynamicweb.Frontend.Page, bool> predicate, Dynamicweb.Frontend.Page page = null)
    {
        var ancestors = GetAncestors(page);
        return ancestors != null ? ancestors.LastOrDefault(predicate) : null;
    }

    Dynamicweb.Frontend.Page GetMostDistantAncestorOrSelf(Func<Dynamicweb.Frontend.Page, bool> predicate, Dynamicweb.Frontend.Page page = null)
    {
        var ancestors = GetAncestors(page, true);
        return ancestors != null ? ancestors.LastOrDefault(predicate) : null;
    }

    Dynamicweb.Frontend.Page GetAncestorByItemType(string itemType, Dynamicweb.Frontend.Page page = null)
    {
        return GetAncestor(p => p.Item != null && p.Item.SystemName == itemType, page);
    }

    Dynamicweb.Frontend.Page GetMostDistantAncestorByItemType(string itemType, Dynamicweb.Frontend.Page page = null)
    {
        return GetMostDistantAncestor(p => p.Item != null && p.Item.SystemName == itemType, page);
    }

    Dynamicweb.Frontend.Page GetMostDistantAncestorOrSelfByItemType(string itemType, Dynamicweb.Frontend.Page page = null)
    {
        return GetMostDistantAncestorOrSelf(p => p.Item != null && p.Item.SystemName == itemType, page);
    }
}

@helper DUMP(object value, string heading = null)
{
    // https://github.com/dynamicweb/razor/wiki/Using-Json.Net-to-inspect-values
    <pre class="dw-dump">@if (heading != null) {<text>@heading</text>
    }
@Newtonsoft.Json.JsonConvert.SerializeObject(value, new Newtonsoft.Json.JsonSerializerSettings {
    ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
    MissingMemberHandling = Newtonsoft.Json.MissingMemberHandling.Ignore,
    Error = (serializer,err) => err.ErrorContext.Handled = true,
    Formatting = Newtonsoft.Json.Formatting.Indented
})
</pre>
}